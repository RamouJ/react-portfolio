{"version":3,"file":"static/js/421.2522de90.chunk.js","mappings":"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","sources":["utils/transition.js","utils/style.js","utils/three.js","components/background/DisplacementSphere.js","hooks/usePrefersReducedMotion.js","hooks/useInViewport.js","components/background/sphereVertShader.js","components/background/sphereFragShader.js"],"sourcesContent":["const visibleStatus = ['entering', 'entered'];\n\n/**\n * Is the given TransitionStatus visible?\n */\nexport const isVisible = status => visibleStatus.includes(status);\n\n/**\n * Is the given TransitionStatus hidden?\n */\nexport const isHidden = status => !visibleStatus.includes(status);\n\n/**\n * Forces a reflow to trigger transitions on enter\n */\nexport const reflow = node => node && node.offsetHeight;\n","import { Color } from 'three/src/math/Color';\n\n/**\n * Media query breakpoints\n */\nexport const media = {\n  desktop: 1600,\n  laptop: 1280,\n  tablet: 1024,\n  mobile: 696,\n  mobileS: 320,\n};\n\n/**\n * Convert a px string to a number\n */\nexport const pxToNum = px => Number(px.replace('px', ''));\n\n/**\n * Convert a number to a px string\n */\nexport const numToPx = num => `${num}px`;\n\n/**\n * Convert pixel values to rem for a11y\n */\nexport const pxToRem = px => `${px / 16}rem`;\n\n/**\n * Convert ms token values to a raw numbers for ReactTransitionGroup\n * Transition delay props\n */\nexport const msToNum = msString => Number(msString.replace('ms', ''));\n\n/**\n * Convert a number to an ms string\n */\nexport const numToMs = num => `${num}ms`;\n\n/**\n * Convert an rgb theme property (e.g. rgbBlack: '0 0 0')\n * to a ThreeJS Color class\n */\nexport const rgbToThreeColor = rgb =>\n  new Color(...rgb.split(' ').map(value => Number(value) / 255));\n","/**\n * Clean up a scene's materials and geometry\n */\nexport const cleanScene = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n\n    object.geometry.dispose();\n\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      for (const material of object.material) {\n        cleanMaterial(material);\n      }\n    }\n  });\n\n  scene.dispose();\n};\n\n/**\n * Clean up and dispose of a material\n */\nexport const cleanMaterial = material => {\n  material.dispose();\n\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n\n/**\n * Clean up and dispose of a renderer\n */\nexport const cleanRenderer = renderer => {\n  renderer.dispose();\n  renderer.forceContextLoss();\n  renderer = null;\n};\n\n/**\n * Clean up lights by removing them from their parent\n */\nexport const removeLights = lights => {\n  for (const light of lights) {\n    light.parent.remove(light);\n  }\n};\n\n/**\n * A reasonable default pixel ratio\n */\nexport const renderPixelRatio = 2;\n","import React, { useEffect, useRef, useContext } from \"react\";\nimport classNames from \"classnames\";\nimport {\n    Vector2,\n    sRGBEncoding,\n    WebGLRenderer,\n    PerspectiveCamera,\n    Scene,\n    DirectionalLight,\n    AmbientLight,\n    UniformsUtils,\n    UniformsLib,\n    MeshPhongMaterial,\n    SphereBufferGeometry,\n    Mesh,\n} from \"three\";\nimport { spring, value } from \"popmotion\";\nimport innerHeight from \"ios-inner-height\";\nimport vertShader from \"./sphereVertShader\";\nimport fragShader from \"./sphereFragShader\";\nimport { Transition } from \"react-transition-group\";\nimport { usePrefersReducedMotion } from \"../../hooks/usePrefersReducedMotion\";\nimport { useInViewport } from \"../../hooks/useInViewport\";\nimport { reflow } from \"../../utils/transition\";\nimport { media, rgbToThreeColor } from \"../../utils/style\";\nimport { cleanScene, removeLights, cleanRenderer } from \"../../utils/three\";\nimport \"./DisplacementSphere.css\";\nimport { ThemeContext } from \"../theme/ThemeProvider\";\n\nconst DisplacementSphere = (props) => {\n    const { theme } = useContext(ThemeContext);\n    const rgbBackground = theme === \"light\" ? \"250 250 250\" : \"17 17 17\";\n    const width = useRef(window.innerWidth);\n    const height = useRef(window.innerHeight);\n    const start = useRef(Date.now());\n    const canvasRef = useRef();\n    const mouse = useRef();\n    const renderer = useRef();\n    const camera = useRef();\n    const scene = useRef();\n    const lights = useRef();\n    const uniforms = useRef();\n    const material = useRef();\n    const geometry = useRef();\n    const sphere = useRef();\n    const tweenRef = useRef();\n    const sphereSpring = useRef();\n    const prefersReducedMotion = Boolean(usePrefersReducedMotion() && false); //disabled until switching themes fixed\n    const isInViewport = useInViewport(canvasRef);\n\n    useEffect(() => {\n        mouse.current = new Vector2(0.8, 0.5);\n        renderer.current = new WebGLRenderer({\n            canvas: canvasRef.current,\n            powerPreference: \"high-performance\",\n        });\n        renderer.current.setSize(width.current, height.current);\n        renderer.current.setPixelRatio(1);\n        renderer.current.outputEncoding = sRGBEncoding;\n\n        camera.current = new PerspectiveCamera(\n            55,\n            width.current / height.current,\n            0.1,\n            200\n        );\n        camera.current.position.z = 52;\n\n        scene.current = new Scene();\n\n        material.current = new MeshPhongMaterial();\n        material.current.onBeforeCompile = (shader) => {\n            uniforms.current = UniformsUtils.merge([\n                UniformsLib[\"ambient\"],\n                UniformsLib[\"lights\"],\n                shader.uniforms,\n                { time: { type: \"f\", value: 0 } },\n            ]);\n\n            shader.uniforms = uniforms.current;\n            shader.vertexShader = vertShader;\n            shader.fragmentShader = fragShader;\n            shader.lights = true;\n        };\n\n        geometry.current = new SphereBufferGeometry(32, 128, 128);\n\n        sphere.current = new Mesh(geometry.current, material.current);\n        sphere.current.position.z = 0;\n        sphere.current.modifier = Math.random();\n        scene.current.add(sphere.current);\n\n        return () => {\n            cleanScene(scene.current);\n            cleanRenderer(renderer.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        const dirLight = new DirectionalLight(\n            rgbToThreeColor(\"250 250 250\"),\n            0.6\n        );\n        const ambientLight = new AmbientLight(\n            rgbToThreeColor(\"250 250 250\"),\n            theme === \"light\" ? 0.8 : 0.1\n        );\n\n        dirLight.position.z = 200;\n        dirLight.position.x = 100;\n        dirLight.position.y = 100;\n\n        lights.current = [dirLight, ambientLight];\n        scene.current.background = rgbToThreeColor(rgbBackground);\n        lights.current.forEach((light) => scene.current.add(light));\n\n        return () => {\n            removeLights(lights.current);\n        };\n    }, [rgbBackground, theme]);\n\n    useEffect(() => {\n        const handleResize = () => {\n            const canvasHeight = innerHeight();\n            const windowWidth = window.innerWidth;\n            const fullHeight = canvasHeight + canvasHeight * 0.3;\n            canvasRef.current.style.height = fullHeight;\n            renderer.current.setSize(windowWidth, fullHeight);\n            camera.current.aspect = windowWidth / fullHeight;\n            camera.current.updateProjectionMatrix();\n\n            // Render a single frame on resize when not animating\n            if (prefersReducedMotion) {\n                renderer.current.render(scene.current, camera.current);\n            }\n\n            if (windowWidth <= media.mobile) {\n                sphere.current.position.x = 14;\n                sphere.current.position.y = 10;\n            } else if (windowWidth <= media.tablet) {\n                sphere.current.position.x = 18;\n                sphere.current.position.y = 14;\n            } else {\n                sphere.current.position.x = 22;\n                sphere.current.position.y = 16;\n            }\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        handleResize();\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, [prefersReducedMotion]);\n\n    useEffect(() => {\n        const onMouseMove = (event) => {\n            const { rotation } = sphere.current;\n\n            const position = {\n                x: event.clientX / window.innerWidth,\n                y: event.clientY / window.innerHeight,\n            };\n\n            if (!sphereSpring.current) {\n                sphereSpring.current = value(rotation.toArray(), (values) =>\n                    rotation.set(\n                        values[0],\n                        values[1],\n                        sphere.current.rotation.z\n                    )\n                );\n            }\n\n            tweenRef.current = spring({\n                from: sphereSpring.current.get(),\n                to: [position.y / 2, position.x / 2],\n                stiffness: 30,\n                damping: 20,\n                velocity: sphereSpring.current.getVelocity(),\n                mass: 2,\n                restSpeed: 0.0001,\n            }).start(sphereSpring.current);\n        };\n\n        if (!prefersReducedMotion && isInViewport) {\n            window.addEventListener(\"mousemove\", onMouseMove);\n        }\n\n        return () => {\n            window.removeEventListener(\"mousemove\", onMouseMove);\n\n            if (tweenRef.current) {\n                tweenRef.current.stop();\n            }\n        };\n    }, [isInViewport, prefersReducedMotion]);\n\n    useEffect(() => {\n        let animation;\n\n        const animate = () => {\n            animation = requestAnimationFrame(animate);\n\n            if (uniforms.current !== undefined) {\n                uniforms.current.time.value =\n                    0.00005 * (Date.now() - start.current);\n            }\n\n            sphere.current.rotation.z += 0.001;\n            renderer.current.render(scene.current, camera.current);\n        };\n\n        if (!prefersReducedMotion && isInViewport) {\n            animate();\n        } else {\n            renderer.current.render(scene.current, camera.current);\n        }\n\n        return () => {\n            cancelAnimationFrame(animation);\n        };\n    }, [isInViewport, prefersReducedMotion]);\n\n    return (\n        <Transition appear in onEnter={reflow} timeout={3000}>\n            {(status) => (\n                <canvas\n                    aria-hidden\n                    className={classNames(\n                        \"displacement-sphere\",\n                        `displacement-sphere--${status}`\n                    )}\n                    ref={canvasRef}\n                    {...props}\n                />\n            )}\n        </Transition>\n    );\n};\n\nexport default DisplacementSphere;\n","export const usePrefersReducedMotion = () => {\n    if (!window.matchMedia) return false;\n\n    return window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n};\n","import { useEffect, useState } from \"react\";\n\nexport const useInViewport = (\n    elementRef,\n    unobserveOnIntersect,\n    options = {}\n) => {\n    const [intersect, setIntersect] = useState(false);\n    const [isUnobserved, setIsUnobserved] = useState(false);\n\n    useEffect(() => {\n        if (!elementRef?.current) return;\n\n        const observer = new IntersectionObserver(([entry]) => {\n            const { isIntersecting, target } = entry;\n\n            setIntersect(isIntersecting);\n\n            if (isIntersecting && unobserveOnIntersect) {\n                observer.unobserve(target);\n                setIsUnobserved(true);\n            }\n        }, options);\n\n        if (!isUnobserved) {\n            observer.observe(elementRef.current);\n        }\n\n        return () => observer.disconnect();\n    }, [elementRef, unobserveOnIntersect, options, isUnobserved]);\n\n    return intersect;\n};\n","/* eslint-disable import/no-anonymous-default-export */\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nexport default `\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat turbulence(vec3 p) {\n  float w = 100.0;\n  float t = -.5;\n  for (float f = 1.0 ; f <= 10.0 ; f++) {\n    float power = pow(2.0, f);\n    t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n  }\n  return t;\n}\n\n// START\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying float noise;\n\nvarying vec3 vViewPosition;\n\nvoid main() {\n  #include <beginnormal_vertex>\n  #include <defaultnormal_vertex>\n  #include <begin_vertex>\n  #include <project_vertex>\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize(transformedNormal);\n  #endif\n\n  vViewPosition = - mvPosition.xyz;\n\n  vUv = uv;\n\n  noise = turbulence(0.01 * position + normal + time * 0.8);\n  vec3 displacement = vec3((position.x) * noise, position.y * noise, position.z * noise);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4((position + normal) + displacement, 1.0);\n}\n`;\n","/* eslint-disable import/no-anonymous-default-export */\nexport default `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 newPosition;\nvarying float noise;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <envmap_physical_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive;\n\n  #include <logdepthbuf_fragment>\n  #include <map_fragment>\n  #include <color_fragment>\n  #include <alphamap_fragment>\n  #include <alphatest_fragment>\n  #include <specularmap_fragment>\n  #include <normal_fragment_begin>\n  #include <normal_fragment_maps>\n  #include <emissivemap_fragment>\n  #include <lights_phong_fragment>\n  #include <lights_fragment_begin>\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n  #include <aomap_fragment>\n\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n  #include <envmap_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n`;\n"],"names":["reflow","node","offsetHeight","media","rgbToThreeColor","rgb","Color","split","map","value","Number","cleanMaterial","material","dispose","Object","keys","props","theme","useContext","ThemeContext","rgbBackground","width","useRef","window","innerWidth","height","innerHeight","start","Date","now","canvasRef","mouse","renderer","camera","scene","lights","uniforms","geometry","sphere","tweenRef","sphereSpring","prefersReducedMotion","Boolean","matchMedia","matches","isInViewport","elementRef","unobserveOnIntersect","options","useState","intersect","setIntersect","isUnobserved","setIsUnobserved","useEffect","current","observer","IntersectionObserver","entry","isIntersecting","target","unobserve","observe","disconnect","useInViewport","Vector2","WebGLRenderer","canvas","powerPreference","setSize","setPixelRatio","outputEncoding","sRGBEncoding","PerspectiveCamera","position","z","Scene","MeshPhongMaterial","onBeforeCompile","shader","UniformsUtils","UniformsLib","time","type","vertexShader","fragmentShader","SphereBufferGeometry","Mesh","modifier","Math","random","add","traverse","object","isMesh","isMaterial","cleanScene","forceContextLoss","cleanRenderer","dirLight","DirectionalLight","ambientLight","AmbientLight","x","y","background","forEach","light","parent","remove","removeLights","handleResize","canvasHeight","windowWidth","fullHeight","style","aspect","updateProjectionMatrix","render","addEventListener","removeEventListener","onMouseMove","event","rotation","clientX","clientY","toArray","values","set","spring","from","get","to","stiffness","damping","velocity","getVelocity","mass","restSpeed","stop","animation","animate","requestAnimationFrame","undefined","cancelAnimationFrame","Transition","appear","in","onEnter","timeout","status","className","classNames","ref"],"sourceRoot":""}